using(navigation,local,*)
using(hypixelcraft,local,*)
using(core,local,*)
func moveNorth(nblocks){
        cx = 0
        cz = 0
        getLocation(&cx,&cz)
        native{
                keydown(forward)
        }
        target = cz - nblocks
        while(target != cz){
                getLocation(&cx,&cz)
        }
        native{
                keyup(forward)
        }
}
func moveBackNorth(nblocks){
        cx = 0
        cz = 0
        getLocation(&cx,&cz)
        native{
                keydown(back)
        }
        target = cz + nblocks
        while(target != cz){
                getLocation(&cx,&cz)
        }
        native{
                keyup(back)
        }
}
func dumpSugar(){
        native{
        key(use)
        wait(500ms)
        GUI("chest")
        for(#slot,54,89)
            getslotitem(%#slot%,&value)
            if(&value == "sugar")
                slotclick(%#slot%,1,true)
                wait(100ms)
            endif
        next
        GUI()
        }
}

func runRowEast(lowerbound,upperbound){
        lookEast()
        tiltUp()
        cx = 0
        cz = 0
        getLocation(&cx,&cz)
        native{
                keydown(forward)
        }
        while(cx < upperbound){
                native{
                !cx!=%XPOS%
                key(attack)
                }
        }
        native{
                keyup(forward)
        }
        lookCTable()
        native{
        key(use)
        GUI("chest")
        }
        craftESugar()
        native{
        GUI()
        }
        lookEast()
        tiltDown()
        dumpSugar()
}
func lookCTable(){
        native{
                looks(50,30,1)
        }
}
func lookCTableW(){
        native{
                looks(220,30,1)
        }
}
func runRowWest(lowerbound,upperbound){
        lookWest()
        tiltUp()
        cx = 0
        cz = 0
        getLocation(&cx,&cz)
        native{
                keydown(forward)
        }
        while(cx > lowerbound){
                native{
                !cx!=%XPOS%
                key(attack)
                }
        }
        native{
                keyup(forward)
        }
        lookCTableW()
        native{
        key(use)
        GUI("chest")
        }
        craftESugar()
        native{
        GUI()
        }
        lookWest()
        tiltDown()
        dumpSugar()
}
func handleEast(lb,ub){
        curx = 0
        curz = 0
        getLocation(&curx,&curz)
        runRowEast(&lb,&ub)
        lookNorth()
        moveNorth(2)

}
func handleWest(lb,ub){
        runRowWest(&lb,&ub)
        lookNorth()
        moveNorth(1)

}
def isMaxed(x,y,z){
        mark = 0
        native{
                GETID(%!x!%,%!y!%,%!z!%,&v)
                !mark! = (&v == "reeds")
        }
        return mark

}
func getSugarCaneMaxed(zval,maxVal,ytarget){
        count = 0
        for (xv = -56;xv < 69;xv = xv + 1){
                count = count + isMaxed(&xv,&ytarget,&zval)
                if (count >= maxVal){
                        return maxVal
                }
        }
        return count
}
func countField(xmaxed,ytarget){
        e = getSugarCaneMaxed(-26,&xmaxed,&ytarget)
        a = getSugarCaneMaxed(-20,&xmaxed,&ytarget)
        b = getSugarCaneMaxed(-21,&xmaxed,&ytarget)
        c = getSugarCaneMaxed(-23,&xmaxed,&ytarget)
        d = getSugarCaneMaxed(-24,&xmaxed,&ytarget)
        return a + b +c+d+e
}
func getBestField(targetMax){
        cField = -1
        tarmax =  5*targetMax
        for(currentY = 102;currentY <= 106;currentY = currentY + 4){
                res = countField(&targetMax,currentY)
                if(   res ==  tarmax ){
                        cField = currentY
                        return cField
                }
        }
        return cField
}
func blockToSatisfy(xmaxed,ytarget){
        a = getSugarCaneMaxed(-18,&xmaxed,&ytarget)
        b = getSugarCaneMaxed(-20,&xmaxed,&ytarget)
        c = getSugarCaneMaxed(-21,&xmaxed,&ytarget)
        d = getSugarCaneMaxed(-23,&xmaxed,&ytarget)
        e = getSugarCaneMaxed(-24,&xmaxed,&ytarget)
        q = a + b + c + d + e
        cout << "Distr: " << a << " " << b << " " << c << " " << d << " " << e
        target = 5*xmaxed

        while(q < target){
                native{
                        wait(5000ms)
                }
                native{
                        keydown(left)
                        wait(500ms)
                        keyup(left)
                        keydown(right)
                        wait(1000ms)
                        keyup(right)

                }
                native{
                        wait(5000ms)
                }
                cout << "recounting"
                a = getSugarCaneMaxed(-18,&xmaxed,&ytarget)
                b = getSugarCaneMaxed(-20,&xmaxed,&ytarget)
                c = getSugarCaneMaxed(-21,&xmaxed,&ytarget)
                d = getSugarCaneMaxed(-23,&xmaxed,&ytarget)
                e = getSugarCaneMaxed(-24,&xmaxed,&ytarget)
                q = a + b + c + d + e
                cout << "Distr: " << a << " " << b << " " << c << " " << d << " " << e
                cout << "there are " << q << "stalks existing in the first 5 rows.  Waiting for " << target
        }
}
func runField(lowerbound,upperbound){
        xpos = -1
        zpos = -1
        getLocation(&xpos,&zpos)
        lookWest()
        while(zpos >= 0-76){
                getLocation(&xpos,&zpos)
                cout << "lb / ub " << lowerbound << " " << upperbound
                handleEast(lowerbound,upperbound)
                getLocation(&xpos,&zpos)
                if (zpos < 0-76){
                        lookNorth()
                        moveBackNorth(2);
                        lookWest()
                        while(xpos > lowerbound){
                                getLocation(&xpos,&zpos);

                                native{
                                keydown(forward)
                                !cx!=%XPOS%
                                }
                        }
                        native{
                                keyup(forward)
                        }
                        lookNorth()
                        moveNorth(2)

                }
                else{
                        cout << "running west"
                        handleWest(lowerbound,upperbound)
                }
                getLocation(&xpos,&zpos)
        }
        lookSouth()
        native{
        keydown(forward)
        }
        while(zpos < 0-18){
                getLocation(&xpos,&zpos)
        }
        native{
                keyup(forward)
        }
        lookEast()

}
func gotoEnterStairs(){
        cz = 0
        cx = 0
        tz = -79
        getLocation(&cx,&cz)
        while(cz != tz){
                if(cz < tz){
                        right()
                }
                if (cz > tz){
                        left()
                }
                getLocation(&cx,&cz)
        }
        clear()
}
func gotoExitStairs(){
        cz = 0
        cx = 0
        tz = -80
        getLocation(&cx,&cz)
        while(cz != tz){
                if(cz < tz){
                        right()
                }
                if (cz > tz){
                        left()
                }
                getLocation(&cx,&cz)
        }
        clear()
}
func runReverseStairs(){
        cx = 0
        cz =0
        getLocation(&cx,&cz)

        while(cx < 0-52){
                cout << "cx: " << cx
                fw()
                getLocation(&cx,&cz)
        }
        noStride()
        while(cz < 0-79){
                right()
                getLocation(&cx,&cz)
        }
        noStrafe()
        while(cx > 0-56 ){
                bw()
                getLocation(&cx,&cz)
        }
        clear()
}
func runForwardStairs(){
        cx = 0
        cz =0
        getLocation(&cx,&cz)

        while(cx < 0-52){
                cout << "cx: " << cx
                fw()
                getLocation(&cx,&cz)
        }
        noStride()
        while(cz > 0-80){
                left()
                getLocation(&cx,&cz)
        }
        noStrafe()
        while(cx > 0-56 ){
                bw()
                getLocation(&cx,&cz)
        }
        clear()
}
func gotoLevel(tarY){
        cy = 0
        getAltitude(&cy)
        if(cy == tarY){
                return -1
        }
        while(cy != tarY){
                if (cy < tarY){
                        lookEast()
                        gotoEnterStairs()
                        runForwardStairs()
                }
                else{
                        lookEast()
                        gotoExitStairs()
                        runReverseStairs()
                }
                getAltitude(&cy)
        }
        return 1
}
func resetOp(){

        zpos = 0
        xpos = 0
        getLocation(&xpos,&zpos)
        if (zpos >= (0-18)){
                return 1
        }
        lookSouth()
        while(zpos < 0-18){
                fw()
                getLocation(&xpos,&zpos)
        }
        clear()
        lookEast()
        return 2
}

func main(){
        cout << "start"
        lowerbound = 0-56
        upperbound = 69
        while(1){
                target_y = getBestField(100)

                if(target_y > 50){
                        target_y = target_y - 2
                        cout << "Blocker checks out reports y level of " << target_y
                        q = gotoLevel(target_y)
                        resetOp()
                        runField(&lowerbound,&upperbound)
                }
                else{
                        cout << "denied reported y value of " << target_y
                        native{
                        wait(200ms)
                        }
                        left()
                        native{
                                wait(500ms)
                        }
                        right()
                        native{
                        wait(2000ms)
                        }
                        noStrafe()
                }
        }

}
