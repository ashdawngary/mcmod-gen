using(core,local,*)
func lookWest(){
        native{
        looks(270,0,%!lookTime!%)
        }
}
func lookEast(lookTime = 1){
        native{
        looks(90,0,%!lookTime!%)
        }
}
func lookNorth(lookTime = 1){
        native{
        looks(0,0,%!lookTime!%)
        }
}
func lookSouth(lookTime = 1){
        native{
        looks(180,0,%!lookTime!%)
        }
}
func lookDown((lookTime = 1){
        native{
        looks(0,90,%!lookTime!%)
        }
}
func getLocation(x,z){
        native{
        !x! = %XPOS%
        !z! = %ZPOS%
        }
}
func getAltitude(y){
        native{
        !y! = %YPOS%
        }
}
func tiltUp(lookTime = 1){
        native{
                looks(+0,-20,%!lookTime!%)
        }
}
func tiltDown(lookTime = 1){
        native{
                looks(+0,+35,%!lookTime!%)
        }
}
func moveX(x,lookTime = 1)
{
    origx=0
    origz=0
    getLocation(&origx, &origz)
    if(x == 0){
        return true
    }
    if(x < 0) {
        lookWest(lookTime=lookTime)
        newx = origx + x
        fw()
        while(origx > newx) {
            getLocation(&origx, &origz)
        }
        clear()
    }
    else {
        lookEast(lookTime=lookTime)
        newx = origx + x
        fw()
        while(origx < newx) {
            getLocation(&origx, &origz)
        }
        clear()
    }
    clear()
}
func moveZ(z,lookTime = 1)
{
    origx=0
    origz=0
    getLocation(&origx, &origz)
    if(z == 0){
        return true
    }
    if(z < 0) {
        lookNorth(lookTime=lookTime)
        newz = origz + z
        fw()
        while(origz > newz) {
            getLocation(&origx, &origz)
        }
        clear()
    }
    else {
        lookSouth(lookTime=lookTime)
        newz = origz + z
        fw()
        while(origz < newz) {
            getLocation(&origx, &origz)
        }
        clear()
    }
    clear()
}
func moveTo(targetx,targetz,lookTime = 1)
{
    origx = 0
    origz = 0
    getLocation(&origx, &origz)
    diffx = targetx - origx
    diffz = targetz - origz
    cout << "orig: " << origx << " " << origz
    cout << "targets: " << targetx << " " << targetz
    moveX(diffx,lookTime=lookTime)
    moveZ(diffz,lookTime=lookTime)
}
func moveDownX(x,lookTime = 1) {
    origx=0
    origz=0
    getLocation(&origx, &origz)
    if(x == 0){
        return true
    }
    if(x < 0) {
        lookDown(lookTime=lookTime)
        newx = origx + x
        left()
        while(origx > newx) {
            getLocation(&origx, &origz)
        }
    }
    else {
        lookDown(lookTime=lookTime)
        newx = origx + x
        right()
        while(origx < newx) {
            getLocation(&origx, &origz)
        }
    }
    clear()
}
func moveDownZ(z,lookTime = 1){
    origx=0
    origz=0
    getLocation(&origx, &origz)
    if(z == 0){
        return true
    }
    if(z < 0) {
        lookDown(lookTime=lookTime)
        newz = origz + z
        fw()
        while(origz > newz) {
            getLocation(&origx, &origz)
        }
    }
    else {
        lookDown(lookTime=lookTime)
        newz = origz + z
        bw()
        while(origz < newz) {
            getLocation(&origx, &origz)
        }
    }
    clear()
}
